var storageEngine = (function() {
    var e = {
        code: "STORAGE_API_NOT_SUPPORTED",
        message: "The storage engine has not been initialized",
      },
      t = { code: "STORAGE_API_NOT_INITIALIZED", message: "" },
      n = e => ({
        code: "STORE_NOT_INITIALIZED",
        message: `The object store ${e} has not been initialized`,
      }),
      a = !1,
      i = {}
    function o(e) {
      var t = localStorage.getItem(e)
      return JSON.parse(t)
    }
    return {
      init(t, n) {
        window.localStorage ? ((a = !0), t(null)) : n(e)
      },
      initObjectStore(e, n, o) {
        a
          ? localStorage.getItem(e) ||
            localStorage.setItem(e, JSON.stringify({}))
          : o(t),
          (i[e] = e),
          n(null)
      },
      findAll(e, s, r) {
        a ? i || r(n(e)) : r(t)
        var d = [],
          l = o(e)
        $.each(l, function(e, t) {
          d.push(t)
        }),
          s(d)
      },
      findById(e, s, r, d) {
        a ? i[e] || d(n(e)) : d(t), r(o(e)[s])
      },
      save(e, s, r, d) {
        a ? i[e] || d(n(e)) : d(t), s.id || (s.id = $.now())
        var l = o(e)
        ;(l[s.id] = s), localStorage.setItem(e, JSON.stringify(l)), r(s)
      },
      delete(e, s, r, d) {
        a ? i[e] || d(n(e)) : d(t)
        var l = o(e)
        l[s]
          ? (delete l[s], localStorage.setItem(e, JSON.stringify(l)), r(s))
          : d(
              (e => ({
                code: "OBJECT_NOT_FOUND",
                message: `The object store has no item with ${e}`,
              }))(s)
            )
      },
      findByProperty(e, s, r, d, l) {
        a ? i[e] || l(n(e)) : l(t)
        var c = [],
          f = o(e)
        $.each(f, function(e, t) {
          t[s] === r && c.push(t)
        }),
          d(c)
      },
    }
  })(),
  tasksController = (function() {
    function e(e) {
      console.log(`${e.code}: ${e.message}`)
    }
    var t,
      n = !1
    return {
      init: function(a) {
        storageEngine.init(function() {
          storageEngine.initObjectStore("task", function() {}, e)
        }, e),
          n ||
            ((t = a),
            $(t)
              .find('[required="required"]')
              .prev("label")
              .append("<span>*</span>")
              .children("span")
              .addClass("required"),
            $(t)
              .find("tbody tr:even")
              .addClass("even"),
            $(t)
              .find("#btnAddTask")
              .click(function(e) {
                e.preventDefault(),
                  $(t)
                    .find("#taskCreation")
                    .removeClass("not")
              }),
            $(t)
              .find("tbody tr")
              .click(function(e) {
                $(e.target)
                  .closest("td")
                  .siblings()
                  .andSelf()
                  .toggleClass("rowHighlight")
              }),
            $(t)
              .find("#tblTasks tbody")
              .on("click", ".editRow", function(n) {
                $(t)
                  .find("#taskCreation")
                  .removeClass("not"),
                  storageEngine.findById(
                    "task",
                    $(n.target).data().taskId,
                    function(e) {
                      $(t)
                        .find("form")
                        .fromObject(e)
                    },
                    e
                  )
              }),
            $(t)
              .find("#tblTasks tbody")
              .on("click", ".deleteRow", function(t) {
                storageEngine.delete(
                  "task",
                  $(t.target).data().taskId,
                  function() {
                    $(t.target)
                      .parents("tr")
                      .remove()
                  },
                  e
                )
              }),
            $(t)
              .find("#saveTask")
              .click(function(n) {
                if (
                  (n.preventDefault(),
                  $(t)
                    .find("form")
                    .valid())
                ) {
                  var a = $("form").toObject()
                  storageEngine.save(
                    "task",
                    a,
                    function(e) {
                      $("#taskRow")
                        .tmpl(e)
                        .appendTo($(t).find("#tblTasks tbody"))
                    },
                    e
                  )
                }
              }),
            (n = !0))
      },
      loadTasks: function() {
        storageEngine.findAll(
          "task",
          function(e) {
            $.each(e, function(e, n) {
              $("#taskRow")
                .tmpl(n)
                .appendTo($(t).find("#tblTasks tbody"))
            })
          },
          e
        )
      },
    }
  })()
//# sourceMappingURL=data:application/json;charset=utf8;base64,
